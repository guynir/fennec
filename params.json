{"name":"Fennec","tagline":"The way God intended us to use templating.","body":"# What Templating is all about\r\n\r\nTemplating is the art of taking an unprocessed text, adding it a context and generating contents.\r\n\r\n| | |\r\n--- | --- \r\n|The template:| Welcome back Mr. *{{lastName}}*. |\r\n|The context:| lastName = \"Bond\" |\r\n|The outcome:| Welcome back Mr. *Bond*. |\r\n\r\n# Why do I need templating ?\r\nBecause sometimes your application must be dynamically generated in run-time:\r\n\r\n```html\r\n<body>\r\n    Welcome back, Mr. {{lastName}}.<br>\r\n    We have been expecting your.<p>\r\n\r\n    The last time you where here was {{lastLoginTime}}.\r\n</body>\r\n``` \r\n\r\nIn the example above, the two tokens (or variables) `lastName` and `lastLoginTime` changes with each user and login time.\r\nThese values must be dynamically generated.\r\n\r\n# Why Fennec ?\r\nThe *Fennec* library gives the developer an easy way to tie between a client-side templating library (currently only [Handlebars](http://handlebarsjs.com/) is supported) and a DOM element. It contains the boilerplate code you'd probably write yourself in every project that uses client-side templating.\r\n\r\n# The example\r\n\r\n(I removed some elements for better clarity).\r\n```html\r\n<head>\r\n\t<script type=\"text/javascript\">\r\n\t\t// Reference to agent.\r\n\t\tvar agent;\r\n\t\t$( document ).ready(function() {\r\n\t\t\t// Create a new template agent.\r\n\t\t\tagent = new TemplateBinder(\".container\");\r\n\t\t\tagent.refresh();\r\n\t\t});\r\n\r\n\t\tfunction applyNewName(theName) {\r\n\t\t\tagent.refresh({name: theName});\r\n\t\t}\r\n\t</script>\r\n</head>\r\n\r\n<body>\r\n\t<div class=\"container\">\r\n\t\t<span>\r\n\t\t\t{{#if name}}\r\n\t\t\t\tHello {{name}} ! Very pleased to meet you !!!\r\n\t\t\t{{else}}\r\n\t\t\t\tHello Mr., I don't know your name.\r\n\t\t\t{{/if}}\r\n\t\t</span>\r\n\t\t<form id=\"form\">\r\n\t\t\t<label>\r\n\t\t\t\t{{#if name}}\r\n\t\t\t\tYou can change your name:\r\n\t\t\t\t{{else}}\r\n\t\t\t\tPlease tell me your name:\r\n\t\t\t\t{{/if}}\r\n\t\t\t</label>\r\n\t\t\t<input type=\"text\" id=\"name\">\r\n\t\t\t<input type=\"button\" onclick=\"applyNewName(this.form.name.value)\" value=\"Change\">\r\n\t\t</form>\r\n\t</div>\r\n</body>\r\n```\r\n\r\nThe body itself contains a simple template in a syntax supported by [Mustache](http://mustache.github.io/) and [Handlebars](http://handlebarsjs.com/).\r\n\r\nThe idea is simple: Every time we call `applyNewName()` with a new string representing a name, the body is rendered and new values are applied.\r\nYou can download the code from [this example](https://github.com/guynir/fennec/blob/master/examples/sample.html) at GitHub.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}